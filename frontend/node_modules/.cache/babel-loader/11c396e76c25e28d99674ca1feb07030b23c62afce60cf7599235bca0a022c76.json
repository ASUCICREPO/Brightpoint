{"ast":null,"code":"/**\n * Function to create a message block with consistent structure and validation.\n *\n * @param {string} message - The content of the message.\n * @param {string} sentBy - The sender of the message ('USER' or 'BOT').\n * @param {string} [type='TEXT'] - The type of the message ('TEXT' or 'FILE').\n * @param {string} [state='PROCESSING'] - The state of the message ('PROCESSING' or 'RECEIVED' or 'SENT' or 'STREAMING').\n * @param {string} [fileName=''] - The name of the file (if type is 'FILE').\n * @param {string} [fileStatus=''] - The status of the file (if type is 'FILE').\n * @returns {Object} - A message block object.\n * @throws Will throw an error if sentBy, type, or state are invalid.\n */const createMessageBlock=function(message,sentBy){let type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"TEXT\";let state=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"PROCESSING\";let fileName=arguments.length>4&&arguments[4]!==undefined?arguments[4]:\"\";let fileStatus=arguments.length>5&&arguments[5]!==undefined?arguments[5]:\"\";// Valid sender types\nconst validSenders=[\"USER\",\"BOT\"];// Valid message types\nconst validTypes=[\"TEXT\",\"FILE\"];// Valid message states\nconst validStates=[\"PROCESSING\",\"RECEIVED\",\"SENT\",\"STREAMING\"];// Validate the 'sentBy' parameter\nif(!validSenders.includes(sentBy)){throw new Error(\"Invalid sender. Must be 'USER' or 'BOT'.\");}// Validate the 'type' parameter\nif(!validTypes.includes(type)){throw new Error(\"Invalid message type. Must be 'TEXT' or 'FILE'.\");}// Validate the 'state' parameter\nif(!validStates.includes(state)){throw new Error(\"Invalid state. Must be 'PROCESSING', 'RECEIVED', 'SENT', or 'STREAMING'.\");}// Return the message block object\nreturn{message,sentBy,type,state,fileName,fileStatus};};export default createMessageBlock;","map":{"version":3,"names":["createMessageBlock","message","sentBy","type","arguments","length","undefined","state","fileName","fileStatus","validSenders","validTypes","validStates","includes","Error"],"sources":["/Users/pratikshawadibhasme/Desktop/ASU CIC/Brightpoint/frontend/src/utilities/createMessageBlock.js"],"sourcesContent":["/**\n * Function to create a message block with consistent structure and validation.\n *\n * @param {string} message - The content of the message.\n * @param {string} sentBy - The sender of the message ('USER' or 'BOT').\n * @param {string} [type='TEXT'] - The type of the message ('TEXT' or 'FILE').\n * @param {string} [state='PROCESSING'] - The state of the message ('PROCESSING' or 'RECEIVED' or 'SENT' or 'STREAMING').\n * @param {string} [fileName=''] - The name of the file (if type is 'FILE').\n * @param {string} [fileStatus=''] - The status of the file (if type is 'FILE').\n * @returns {Object} - A message block object.\n * @throws Will throw an error if sentBy, type, or state are invalid.\n */\nconst createMessageBlock = (message, sentBy, type = \"TEXT\", state = \"PROCESSING\", fileName = \"\", fileStatus = \"\") => {\n  // Valid sender types\n  const validSenders = [\"USER\", \"BOT\"];\n  // Valid message types\n  const validTypes = [\"TEXT\", \"FILE\"];\n  // Valid message states\n  const validStates = [\"PROCESSING\", \"RECEIVED\", \"SENT\", \"STREAMING\"];\n\n  // Validate the 'sentBy' parameter\n  if (!validSenders.includes(sentBy)) {\n    throw new Error(\"Invalid sender. Must be 'USER' or 'BOT'.\");\n  }\n\n  // Validate the 'type' parameter\n  if (!validTypes.includes(type)) {\n    throw new Error(\"Invalid message type. Must be 'TEXT' or 'FILE'.\");\n  }\n\n  // Validate the 'state' parameter\n  if (!validStates.includes(state)) {\n    throw new Error(\"Invalid state. Must be 'PROCESSING', 'RECEIVED', 'SENT', or 'STREAMING'.\");\n  }\n\n  // Return the message block object\n  return {\n    message,\n    sentBy,\n    type,\n    state,\n    fileName,\n    fileStatus,\n  };\n};\n\nexport default createMessageBlock;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAA,kBAAkB,CAAG,QAAAA,CAACC,OAAO,CAAEC,MAAM,CAA0E,IAAxE,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,IAAE,CAAAG,KAAK,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,YAAY,IAAE,CAAAI,QAAQ,CAAAJ,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,IAAE,CAAAK,UAAU,CAAAL,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC9G;AACA,KAAM,CAAAM,YAAY,CAAG,CAAC,MAAM,CAAE,KAAK,CAAC,CACpC;AACA,KAAM,CAAAC,UAAU,CAAG,CAAC,MAAM,CAAE,MAAM,CAAC,CACnC;AACA,KAAM,CAAAC,WAAW,CAAG,CAAC,YAAY,CAAE,UAAU,CAAE,MAAM,CAAE,WAAW,CAAC,CAEnE;AACA,GAAI,CAACF,YAAY,CAACG,QAAQ,CAACX,MAAM,CAAC,CAAE,CAClC,KAAM,IAAI,CAAAY,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CAEA;AACA,GAAI,CAACH,UAAU,CAACE,QAAQ,CAACV,IAAI,CAAC,CAAE,CAC9B,KAAM,IAAI,CAAAW,KAAK,CAAC,iDAAiD,CAAC,CACpE,CAEA;AACA,GAAI,CAACF,WAAW,CAACC,QAAQ,CAACN,KAAK,CAAC,CAAE,CAChC,KAAM,IAAI,CAAAO,KAAK,CAAC,0EAA0E,CAAC,CAC7F,CAEA;AACA,MAAO,CACLb,OAAO,CACPC,MAAM,CACNC,IAAI,CACJI,KAAK,CACLC,QAAQ,CACRC,UACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAT,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}